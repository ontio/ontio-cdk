#![feature(proc_macro_hygiene)]
#![no_std]
extern crate ontio_std as ostd;
use ostd::abi::{EventBuilder, Sink, Source, VmValueDecoder, VmValueEncoder, VmValueParser};
use ostd::contract::{neo, ont};
use ostd::prelude::*;
use ostd::runtime;
use ostd::types::U128;
extern crate alloc;
use alloc::collections::BTreeMap;
use ostd::console::debug;

use alloc::borrow::ToOwned;
use core::convert::TryInto;
use core::ops::Add;
use hexutil::to_hex;
use ostd::types::u128_to_neo_bytes;

pub struct TestContext<'a> {
    admin: &'a Address,
    map: BTreeMap<String, &'a Address>,
}
const Neo_Contract_Addr: Address = ostd::macros::base58!("AJBZbWexyCdJtJyiG9PjLjYhrzyZtF5iQn");

#[no_mangle]
pub fn invoke() {
    let input = runtime::input();
    let mut source = Source::new(&input);
    let action: &[u8] = source.read().unwrap();
    let mut sink = Sink::new(12);
    match action {
        b"contract_create" => {
            let code = hexutil::read_hex("0133c56b6a00527ac46a51527ac46a00c304696e69749c64090065080a6c7566616a00c3046e616d659c64090065df096c7566616a00c30673796d626f6c9c64090065b8096c7566616a00c308646563696d616c739c6409006592096c7566616a00c30b746f74616c537570706c799c6409006524096c7566616a00c30962616c616e63654f669c6424006a51c3c0519e640700006c7566616a51c300c36a52527ac46a52c36561086c7566616a00c3087472616e736665729c6488006a51c3c0539e640700006c7566616a51c300c36a53527ac46a51c351c36a54527ac46a51c352c36a55527ac4006a5a527ac40002e8037c65a00a6a59527ac46a59c3c06a5b527ac4616a5ac36a5bc39f642f006a59c36a5ac3c36a56527ac46a5ac351936a5a527ac46a53c36a54c36a55c302e8039652726572057562ccff6161616c7566616a00c30d7472616e736665724d756c74699c640c006a51c365b3046c7566616a00c30c7472616e7366657246726f6d9c645f006a51c3c0549e640700006c7566616a51c300c36a57527ac46a51c351c36a53527ac46a51c352c36a54527ac46a51c353c36a55527ac46a57c36a53c36a54c36a55c3537951795572755172755279527954727552727565fd006c7566616a00c307617070726f76659c6440006a51c3c0539e640700006c7566616a51c300c36a58527ac46a51c351c36a57527ac46a51c352c36a55527ac46a58c36a57c36a55c3527265f0026c7566616a00c309616c6c6f77616e63659c6432006a51c3c0529e640700006c7566616a51c300c36a58527ac46a51c351c36a57527ac46a58c36a57c37c650b006c756661006c756658c56b6a00527ac46a51527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a52527ac401026a53527ac46a53c36a00c37e6a51c37e6a54527ac46a52c36a54c37c681253797374656d2e53746f726167652e476574616c7566011fc56b6a00527ac46a51527ac46a52527ac46a53527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a54527ac401016a55527ac401026a56527ac46a00c3c001149e6317006a51c3c001149e630d006a52c3c001149e641a00611461646472657373206c656e677468206572726f72f0616a00c3681b53797374656d2e52756e74696d652e436865636b5769746e65737361009c640700006c7566616a55c36a51c37e6a57527ac46a54c36a57c37c681253797374656d2e53746f726167652e476574616a58527ac46a53c36a58c3a0640700006c7566616a56c36a51c37e6a00c37e6a59527ac46a54c36a59c37c681253797374656d2e53746f726167652e476574616a5a527ac46a55c36a52c37e6a5b527ac46a54c36a5bc37c681253797374656d2e53746f726167652e476574616a5c527ac46a53c36a5ac3a0640700006c7566616a53c36a5ac39c6449006a54c36a59c37c681553797374656d2e53746f726167652e44656c657465616a54c36a57c36a58c36a53c3945272681253797374656d2e53746f726167652e50757461624c00616a54c36a59c36a5ac36a53c3945272681253797374656d2e53746f726167652e507574616a54c36a57c36a58c36a53c3945272681253797374656d2e53746f726167652e50757461616a54c36a5bc36a5cc36a53c3935272681253797374656d2e53746f726167652e507574616a51c36a52c36a53c35272087472616e7366657254c1681553797374656d2e52756e74696d652e4e6f74696679516c75660111c56b6a00527ac46a51527ac46a52527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a53527ac401026a54527ac46a51c3c001149e630d006a00c3c001149e641a00611461646472657373206c656e677468206572726f72f0616a00c3681b53797374656d2e52756e74696d652e436865636b5769746e65737361009c640700006c7566616a52c36a00c3656603a0640700006c7566616a54c36a00c37e6a51c37e6a55527ac46a53c36a55c36a52c35272681253797374656d2e53746f726167652e507574616a00c36a51c36a52c3527208617070726f76616c54c1681553797374656d2e52756e74696d652e4e6f74696679516c756659c56b6a00527ac4006a52527ac46a00c3c06a53527ac4616a52c36a53c39f6473006a00c36a52c3c36a51527ac46a52c351936a52527ac46a51c3c0539e6420001b7472616e736665724d756c746920706172616d73206572726f722ef0616a51c300c36a51c351c36a51c352c35272652900009c64a2ff157472616e736665724d756c7469206661696c65642ef06288ff616161516c7566011dc56b6a00527ac46a51527ac46a52527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a53527ac401016a54527ac40a3535353535353535353551c176c9681253797374656d2e52756e74696d652e4c6f67616a51c3c001149e630d006a00c3c001149e643b0061073333333333333351c176c9681253797374656d2e52756e74696d652e4c6f67611461646472657373206c656e677468206572726f72f0616a00c3681b53797374656d2e52756e74696d652e436865636b5769746e65737361009c642800073131313131313151c176c9681253797374656d2e52756e74696d652e4c6f6761006c7566616a54c36a00c37e6a55527ac46a53c36a55c37c681253797374656d2e53746f726167652e476574616a56527ac46a52c36a56c3a0645f0005323232323251c176c9681553797374656d2e52756e74696d652e4e6f74696679616a56c3681553797374656d2e52756e74696d652e4e6f74696679616a52c3681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a52c36a56c39c6425006a53c36a55c37c681553797374656d2e53746f726167652e44656c65746561622800616a53c36a55c36a56c36a52c3945272681253797374656d2e53746f726167652e50757461616a54c36a51c37e6a57527ac46a53c36a57c37c681253797374656d2e53746f726167652e476574616a58527ac46a53c36a57c36a58c36a52c3935272681253797374656d2e53746f726167652e507574616a00c36a51c36a52c35272087472616e7366657254c1681553797374656d2e52756e74696d652e4e6f74696679516c756659c56b6a00527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a51527ac401016a52527ac46a00c3c001149e6419001461646472657373206c656e677468206572726f72f0616a00c351c176c9681253797374656d2e52756e74696d652e4c6f67616a51c36a52c36a00c37e7c681253797374656d2e53746f726167652e476574616c756655c56b681953797374656d2e53746f726167652e476574436f6e74657874616a00527ac40b546f74616c537570706c796a51527ac46a00c36a51c37c681253797374656d2e53746f726167652e476574616c756654c56b586a00527ac46a00c36c756654c56b034d59546a00527ac46a00c36c756654c56b074d79546f6b656e6a00527ac46a00c36c75660112c56b681953797374656d2e53746f726167652e476574436f6e74657874616a00527ac40400e1f5056a51527ac42241627454514a594b6651787134556479674473624c566a45387552724a32483374507514dca1305cc8fc2b3d3127a2c4849b43301545d84e6a52527ac40400ca9a3b6a53527ac401016a54527ac40b546f74616c537570706c796a55527ac46a52c3c001149e6432000e4f776e657220696c6c6567616c2151c176c9681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a00c36a55c37c681253797374656d2e53746f726167652e4765746164340014416c726561647920696e697469616c697a656421681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a53c36a51c3956a56527ac46a00c36a55c36a56c35272681253797374656d2e53746f726167652e507574616a00c36a54c36a52c37e6a56c35272681253797374656d2e53746f726167652e50757461516c7566006c75665ec56b6a00527ac46a51527ac46a51c36a00c3946a52527ac46a52c3c56a53527ac4006a54527ac46a00c36a55527ac461616a00c36a51c39f6433006a54c36a55c3936a56527ac46a56c36a53c36a54c37bc46a54c351936a54527ac46a55c36a54c3936a00527ac462c8ff6161616a53c36c7566");
            let code_bs = code.unwrap_or(Vec::new());
            let contract_addr = runtime::contract_create(
                code_bs.as_slice(),
                1,
                "oep4",
                "1.0",
                "author",
                "email",
                "desc",
            );
            sink.write(contract_addr);
        }

        b"init" => {
            let res = neo::call_contract(&Neo_Contract_Addr, ("init", ()));
            if let res2 = res.unwrap() {
                let mut parser = VmValueParser::new(res2.as_slice());
                let r = parser.bool();
                sink.write(r.unwrap_or(false));
            } else {
                sink.write(false);
            }
        }
        b"name" => {
            let res = neo::call_contract(&Neo_Contract_Addr, ("name", ()));
            if let res2 = res.unwrap() {
                let mut parser = VmValueParser::new(res2.as_slice());
                let r = parser.string();
                sink.write(r.unwrap_or(""));
            } else {
                sink.write("");
            }
        }
        b"balanceOf" => {
            let addr: Address = source.read().unwrap();
            let res = neo::call_contract(&Neo_Contract_Addr, ("balanceOf", (addr)));
            if let res2 = res.unwrap() {
                debug((hexutil::to_hex(&res2) + "balanceof").as_str());
                let mut parser = VmValueParser::new(&res2);
                let r = parser.number().unwrap_or(0u128);
                sink.write(r);
            } else {
                sink.write(0 as u128);
            }
        }
        b"transfer" => {
            let from_addr: Address = source.read().unwrap();
            let to_addr: Address = source.read().unwrap();
            let amount: U128 = source.read().unwrap();

            let res =
                neo::call_contract(&Neo_Contract_Addr, ("transfer", (from_addr, to_addr, amount)));

            if res.is_some() {
                let data = res.unwrap();
                debug("11111111");
                debug(hexutil::to_hex(data.as_slice()).as_str());
                let mut parser = VmValueParser::new(&data);
                let boo = parser.bool().unwrap_or(false);
                sink.write(boo);
            } else {
                sink.write(false);
            }
        }
        b"testcase" => sink.write(testcase()),
        _ => panic!("unsupported action!"),
    }
    runtime::ret(sink.bytes())
}

fn get_tc<'a>(source: &mut Source<'a>) -> TestContext<'a> {
    let mut map = BTreeMap::new();
    let admin = source.read().unwrap();
    let n = source.read_varuint().unwrap_or(0);

    TestContext { admin, map }
}

fn testcase() -> String {
    r#"
    [
        [{"method":"contract_create","expected":"address:AJBZbWexyCdJtJyiG9PjLjYhrzyZtF5iQn"},
        {"method":"init","expected":"bool:true"},
        {"method":"init","expected":"bool:true"},
        {"method":"balanceOf", "param":"address:ANxmS9tQuem9AkTjzcHEUh1KURDd6hNuGA","expected":"int:1000000000"},
        {"env":{"witness":["AbtTQJYKfQxq4UdygDsbLVjE8uRrJ2H3tP"]}, "method":"transfer", "param":"address:AbtTQJYKfQxq4UdygDsbLVjE8uRrJ2H3tP,address:AWJNqh9W4NDGmFSCHR4Mp5G9VBKR5r2juF, int:100","expected":"bool:true"},
        {"method":"balanceOf", "param":"address:AWJNqh9W4NDGmFSCHR4Mp5G9VBKR5r2juF","expected":"int:100"}
        ]
    ]
        "#
        .to_string()
}
