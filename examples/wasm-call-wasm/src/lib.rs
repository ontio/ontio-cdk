#![no_std]
#![feature(proc_macro_hygiene)]
extern crate ontio_std as ostd;

use ostd::abi::{Encoder, Sink, Source};
use ostd::prelude::*;
use ostd::runtime;

extern crate hexutil;

const KEY_TOTAL_SUPPLY: &str = "total_supply";
const NAME: &str = "wasm_token";
const SYMBOL: &str = "WTK";
const TOTAL_SUPPLY: u64 = 100000000000;

const _ADDR_EMPTY: Address = ostd::base58!("AFmseVrdL9f9oyCzZefL9tG6UbvhPbdYzM");

fn create_contract() -> Address {
    let code = "0061736d010000000128086000017f60017f0060027f7f0060000060017f017f60037f7f7f0060037f7f7f017f60027f7e0002430303656e76126f6e74696f5f696e7075745f6c656e677468000003656e760f6f6e74696f5f6765745f696e707574000103656e760c6f6e74696f5f72657475726e0002031d1c010405020304030501020201040406040207020203060203030606060405017001010105030100010608017f01418080020b070a0106696e766f6b6500070aa50e1c860101037f230041106b220124000240410b10042202450d002001420b3702042001200236020020014100410b1005200020012903003702002001280200200128020822026a220341002900808002370000200041086a2002410b6a2200360200200341076a4100280087800236000020012000360208200141106a24000f0b410b41011006000b06002000100f0b7e01017f02402000280204220320016b20024f0d0002400240200120026a22022001490d0020034101742201200220022001491b22014100480d00024002402003450d0020002802002003200110182202450d010c030b2001100422020d020b200141011006000b1017000b20002002360200200041046a20013602000b0b040000000bc00402047f017e230041306b2200240041012101024010002202450d00024002402002417f4c0d002002100822010d01200241011006000b1009000b200110010b41002103200041003602082000200236020420002001360200024002402002450d00200041086a4101360200024002400240024002400240024002400240024020012d0000220241ff01460d00200241fe01460d01200241fd01470d03200041206a20004102100a20002d00204101460d02200041286a28020041014b0d0541dc8002100b000b200041206a20004108100a20002d00204101460d01200041206a41086a28020041074b0d0541a48202100b000b200041206a20004104100a20002d00204101470d020b20002d002121030c070b2002ad21040c050b200041286a28020041034b0d0241ec8102100b000b20002802243300002104410321020c020b20002802242900002104410921020c010b20002802243500002104410521020b41012103200442fd01540d014103410541092004428080808010541b200442808004541b2002470d010b200041206a20002004a7100a024020002d00204101470d0020002d002121030c020b200041286a2802002102200028022421030240410c100422010d00410c41011006000b2000420c37021420002001360210024020024105470d0002402003418b8002460d002003418b80024105101e0d010b200041206a1003200041106a200041206a100c2000280210200041186a280200100d000b41c48002100b000b200041013a0020200020033a00210b2003100e000b0600200010120b05001017000b860101037f024002400240024020012802042203200128020822046b20024f0d00200041003a0001410121010c010b200420026a22052004490d0120032005490d0220012802002103200041086a2002360200200041046a200320046a360200200141086a2005360200410021010b200020013a00000f0b200420051015000b200520031016000b0500101b000b08002001200010130b0900200020011002000b0500101b000b0600200010100bb50101037f02400240410028029c83020d004100417f36029c83020240024041002802a08302220120006a220241002802a4830222034d0d00200220036b41ffff036a220341107640002201417f460d0120014110742102024041002802a0830222010d00410020023602a08302200221010b4100200220034180807c716a3602a48302200120006a21020b410020023602a083020c020b410021010c010b101a000b4100410028029c830241016a36029c830220010b2301017f0240200210102203450d002003200020022001200120024b1b101d1a0b20030b1b01017f0240200010102201450d00200141002000101c1a0b20010b4001027f20002802002102200120002802082200ad1014200120012802082000100520012000200128020822036a360208200320012802006a20022000101d1a0bbd0101017f0240200142fd015a0d0020002001a710190f0b0240200142ffff035a0d00200041fd011019200020002802084102100520002000280208220241026a360208200220002802006a20013d00000f0b024020014280808080105a0d00200041fe011019200020002802084104100520002000280208220241046a360208200220002802006a20013e00000f0b200041ff011019200020002802084108100520002000280208220241086a360208200220002802006a20013700000b0500101b000b0500101b000b090041dc8202100b000b0a0020002001200210110b4701017f0240200028020822022000280204470d002000200241011005200041086a28020021020b200028020020026a20013a0000200041086a2200200028020041016a3602000b0500101b000b040000000b2c01017f02402002450d00200021030340200320013a0000200341016a21032002417f6a22020d000b0b20000b3601017f02402002450d00200021030340200320012d00003a0000200341016a2103200141016a21012002417f6a22020d000b0b20000b4401037f024002402002450d00410021030340200020036a2d00002204200120036a2d00002205470d02200341016a22032002490d000b41000f0b41000f0b200420056b0b0bb8030200418080020b9c0368656c6c6f20776f726c6468656c6c6f756e737570706f7274656420616374696f6e216578616d706c65732f68656c6c6f776f726c642f7372632f6c69622e72730000001080000013000000238000001e000000160000000e000000748000002000000094800000550000007208000009000000617373657274696f6e206661696c65643a2032203c3d206275662e6c656e28292f55736572732f7373732f2e636172676f2f72656769737472792f7372632f6769746875622e636f6d2d316563633632393964623965633832332f627974656f726465722d312e332e312f7372632f6c69622e7273000000048100002000000094800000550000007708000009000000617373657274696f6e206661696c65643a2034203c3d206275662e6c656e28293c8100002000000094800000550000007c08000009000000617373657274696f6e206661696c65643a2038203c3d206275662e6c656e282974810000110000008581000017000000ec020000050000006361706163697479206f766572666c6f777372632f6c6962616c6c6f632f7261775f7665632e727300419c83020b0c000000000000000000000000";
    let code_vec = hexutil::read_hex(code).expect("parse hex failed");
    let addr = runtime::contract_create(
        code_vec.as_slice(),
        3,
        "name",
        "version",
        "author",
        "email",
        "desc",
    );
    if let Some(addr_temp) = addr {
        return addr_temp;
    } else {
        return Address::zero();
    }
}

fn call_wasm(addr: &Address) -> String {
    let mut sink = Sink::new(16);
    sink.write("hello".to_string());
    let res = runtime::call_contract(addr, sink.bytes());
    if let Some(r) = res {
        let mut source = Source::new(r);
        return source.read().unwrap();
    } else {
        "".to_string()
    }
}

#[no_mangle]
pub fn invoke() {
    let input = runtime::input();
    let mut source = Source::new(input);
    let action: String = source.read().unwrap();
    let mut sink = Sink::new(12);
    match action.as_str() {
        "create_contract" => {
            sink.write(create_contract());
        }
        "call_wasm" => {
            let addr = source.read().unwrap();
            sink.write(call_wasm(&addr));
        }
        "testcase" => {
            sink.write(testcase());
        }
        _ => panic!("unsupported action!"),
    }

    runtime::ret(sink.bytes())
}

fn testcase() -> String {
    r#"
    [
        [{"method":"create_contract", "expected":"address:AaWd82s2XZWDGGNNHmXjTGHffb8u8vm6GS"},
        {"method":"call_wasm","param":"address:AaWd82s2XZWDGGNNHmXjTGHffb8u8vm6GS","expected":"string:hello world"}
        ]
    ]
    "#.to_string()
}
